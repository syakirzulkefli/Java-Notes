# Study Notes for 16- Reading Input

## Transcript

In this tutorial, I'm going to show you how to read input from the user.
In Java, we have this scanner class that is defined in Java, the Util package.
Let's import this and create a scanner object.
So new scanner.
Now, here inside this parenthesis, we need to specify where we're going to read data
from.
Are we going to read it from the terminal window?
Are we going to read it from a phi or what?
To work with the terminal window, we type system.in.
This is one of the fields in the system class.
A field, as I told you before, is like a variable that we defined in a class.
So we have system.in.
We also have system.out, which we used to print something on the terminal.
Right?
Now, let's use system.in and terminate this statement with a semicolon.
Now, this object has a bunch of methods for reading data and all these methods start
with next.
So we have next byte for reading a byte.
We have next line for reading a line.
We have next Boolean for reading a Boolean and so on.
So let's call the next byte method and see what we get.
This returns a byte value so we can store it in a byte variable.
Let's say someone's age.
And then we print it on a terminal saying, you are class h.
So here we're concatenating a string with a byte.
And in this scenario, we're going to have implicit casting or implicit type conversion.
So Java will automatically convert this byte variable here to a string so they can be added
together.
Okay.
Now let's run this program and see what happens.
So here in the terminal window, we can type 20, enter, and it says you're 20.
Beautiful.
But this is pretty boring.
Let's add a label here and ask the user to type something.
For example, before reading data, we're going to call the print line
method and say age color.
Now let's run the program.
So we get this label here.
However, whatever we type will appear on the next line.
This is because the print line method adds a new line after this label to solve this issue.
We call the print method.
Now let's run the program one more time.
We get this pop up box because our program hasn't finished execution.
So we need to tell IntelliJ that we want to stop and rerun this program.
All right.
Now whatever we type appears right in front of this label, beautiful, enter, you are 20.
Now what if we type a floating point number, like 20.1, we get an exception.
Because this method can only parse byte values.
If you want to get a floating point number, we need to call next float or next double.
What if you want to read a string?
We don't have next string.
We have next and next line.
Let's look at the differences.
So first I'm going to call the next method.
Here we have a compilation issue because this method returns a string.
I'm going to change this to a string.
Let me collapse this.
That's better.
We should also rename this variable.
So what was the shortcut?
Shift and F6.
Now let's rename this to name, enter, beautiful.
And one last time we should also update the label name.
Run the program.
So I'm going to type my name here, mosh.
It says you are mosh, beautiful.
One more time.
This time I'm going to type my full name, mosh, hamadani.
But we don't get the last name.
Here's the reason.
These words that we have here, these are called tokens.
Every time we call the next method, it reads one token.
So here we have a space.
We have two tokens and we need to call the next method two times to get the full name.
The first time we call it returns mosh, the second time we call it returns hamadani.
Then we need to combine these two together.
This is not ideal.
So that's when we use the next line method.
With this method, we get the entire line that the user enters.
No matter how many spaces or tabs are there.
Click look.
So mosh, hamadani and we get the full name.
Now what if I type a few spaces before my name, let's see what happens.
So those spaces also appear here and this looks a little bit odd.
This is where we use the trim method.
Remember, with trim, we can get rid of all these white spaces before or after a string.
So this next line method returns a string that we are storing in this variable.
Now just before storing the result in this variable, here we can use the dot operator
to access the members of this string object.
So we call the trim method and then store the result in this variable.
Once again, we are chaining multiple methods here.
Let's run the program.
So a few spaces mosh, hamadani and we get this beautiful output.
