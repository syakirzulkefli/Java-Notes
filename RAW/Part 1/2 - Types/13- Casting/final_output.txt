# Study Notes for 13- Casting

## Transcript

In this tutorial, we're going to talk about casting and type conversion.
So I'm going to declare a short variable called X and set it to 1.
And then I'm going to declare an integer called Y and set it to X plus 2.
In this example, we're adding a short to an integer.
What do you think the result is going to be?
Well, let's take a look.
So as all you see, let's print Y, we get 3.
That is what you were expecting.
But let me explain what happens under the hood for this expression to get executed.
Because we're dealing with two different types of values.
One is a short, the other is an integer.
One of these values should be converted to the other type.
So there are equal.
Now I got a question for you.
How many bytes do we have in a short variable?
We have two bytes.
How many bytes do we have in an integer?
Four bytes.
So any values that we store in a short variable can also be stored in an integer variable.
Right?
So when this piece of code is going to get executed, this is what's going to happen.
First, Java looks at the value in this variable.
It's 1, right?
It's going to allocate another variable and anonymous variable somewhere in memory.
We don't know where that is.
We don't know the name of that variable.
It doesn't have a name.
It's anonymous.
That variable is going to be an integer.
Then Java is going to copy the value of x into that memory space.
And then it will add these two numbers together.
This is what we call implicit casting.
Let me type it here.
Implicit casting.
That means automatic casting or automatic conversion.
We don't have to worry about it.
Whenever we have a value and that value can be converted to a data type that is bigger.
Casting or conversion happens implicitly or automatically.
So byte can be automatically converted to short.
And this can be converted to an int and long.
Okay?
Now what about floating point numbers?
Let's look at an example.
I'm going to change this to a double 1.
1.
Now here we have a compilation error because on the right side of the assignment operator,
we have a floating point number and double on the left side we have an integer.
So we need to change this to double.
Now when we execute this code, we're going to get 3.1.
Let's verify this.
There you go.
Now let's see how casting happens here.
In this case, we're dealing with a double and an integer.
An integer is less precise than a double.
Because in a double, we can have digits after the decimal point.
So in this example, Java is going to automatically cast this integer to a double.
So that will be 2.0 and then 2.0 will be added to 1.1.
Okay?
So back to this chain.
Here we're going to have float and then double.
So as a general rule of thumb, implicit casting happens whenever we're not going to lose data.
There is no chance for data loss.
Now what if you want y to be an integer?
So in this example, we don't care about the digits after the decimal point.
We want to see 3 on the terminal.
How should we do this?
This is where we should explicitly cast the result.
So we should cast x to an integer like this.
Parenthesis int.
This is explicit casting.
We convert x to an integer so the result will be 1 without a decimal point.
1 will be added to 2 and y will be 3.
Take a look.
There you go.
So this is all about implicit and explicit casting.
Now this explicit casting can only happen between compatible types.
So all these types are compatible because they're all numbers.
But we cannot cast a string to a number.
In other words, if x was a string like this, let's say 1.
We cannot cast x to an integer because they are not compatible.
So how do we do this?
Well, for all these primitive types you have learned, you have wrapper classes.
So in Java, we have a class which is a reference type called integer.
This class is defined in Java that length package.
And in this class, we have a method called parse int.
So this method takes a string and returns an integer.
So integer is the wrapper class for the int primitive type.
We also have short and in this class we have parse short.
So it takes a string and returns a short.
Similarly, we have float and double and obviously the name of these methods are different.
So here we have parse float.
So back to this example.
Let's say we get x as a string and we want to convert it to an integer.
This is how we do it.
integer dot parse int.
We pass x here and then add it to two.
Take a look.
So we get three.
You might be curious why this matters.
Why should we parse or convert a string to a number to add it to something else?
Well, pretty much in most frameworks for building user interfaces.
Whether you're building a desktop or a mobile application or web application,
we always receive input from the user as a string.
So if you have a form with a bunch of text boxes or drop down list,
almost always we get values as a string.
So that's why we need to convert these strings to their numeric representation.
Okay.
Now, what if x is a floating point number here?
What will happen when we try to parse this as an integer?
Let's take a look.
Once again, we get an exception which is how Java reports errors to our programs.
We're going to talk about exceptions in detail in the future.
So if the user enters 1.1, we cannot use this method.
Instead, we should use float or double.
Let's say double because that's easier.
Double parse double.
So we parse this number as a double at two to eight and then stored a result in a double.
And then we will get 3.1, beautiful.
Next, we're going to look at the math class for performing mathematical operations.
