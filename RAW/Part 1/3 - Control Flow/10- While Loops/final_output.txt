# Study Notes for 10- While Loops

## Transcript

In this tutorial, we're going to talk about why loops in Java.
Why loops are very similar to four loops in terms of their functionality, but they're
different in terms of syntax.
Let me show you.
So we're going to continue with the example from the last tutorial.
I'm going to rewrite this code using a Y loop.
So first we declare a loop variable, and I will initialize it to zero.
Next we type, while, and here in parentheses, we type, our loop condition.
While I is greater than zero, then we're going to execute the code inside this block.
So I'm going to copy this from here, paste it in this block, and find that we need to
decrement I like this.
So at the end of each iteration, we decrement I just like our four loops.
So as you can see, we can achieve the same thing using a four loop or a Y loop.
However, the implementation using the four loop is a little bit lighter and cleaner.
So in situations where you know ahead of time, how many times you want to execute one
or more statements, it's better to use a four loop.
Wylops are better in situations where we don't know exactly how many times we want to
repeat something.
For example, let's say we're going to write a program and ask the user to continuously
enter something until they type quit.
The moment they type quit, we're going to terminate the program.
In that situation, we don't know how many times the user is going to enter something.
So let's write that program using a Y loop.
I'm going to delete everything from here.
Alright, we're going to start with our Y loop.
What is our loop condition here?
We don't have a counter variable in this example.
Instead, we want to check to see if the user entered quit or not.
So here we can declare a string called input and initialize it to an empty string.
Then we can write a Y loop like this.
While input does not equal to quit, now this code is not going to work because input
is a string which is a reference type and we cannot use comparison operators between reference
types.
Because these operators will compare the address of a string objects, not their value.
So if you have two strings, quit and quit, but stored in different memory locations,
they have different addresses.
So we can only use the inequality operator to compare their value.
Instead we need to use the equals method of string objects.
So we want to check to see if the input equals quit.
Now here we need to apply the not operator.
So as long as the input does not equal quit, we're going to continuously ask the user to
enter something.
Here we can print a label like input and then we can use a scanner object to read something
from the terminal.
So let's create a scanner object and instantiate it using system.in.
And then call scanner.next, this will return a string so we can store it in this input variable.
With this implementation, in every iteration, we're going to create a new scanner object.
So if the user enters 10 numbers, we're going to create 10 scanner objects in memory.
This is unnecessary and it's actually a bad practice because it's going to pollute our memory.
So it's better to create the scanner object outside of a Y loop and then simply use it
here.
Also, here we're assuming that the user is typing everything in lower case.
So if they type quit in uppercase or any combinations of lower case and uppercase characters,
this logic is not going to work the way we want.
So over here, right after reading something from the terminal, we're going to call the
two lower case method of string objects to convert it to lower case.
Now to make this program more interesting, let's echo back whatever the user enters.
So we simply print that on the terminal.
Now let's run this and see what happens.
So I'm going to enter a few numbers, like one, two, and three, whatever we type gets
a code back, but the moment we type quit, our program terminates.
So why loops are useful in situations where we don't know ahead of time how many times
we want to repeat something.
