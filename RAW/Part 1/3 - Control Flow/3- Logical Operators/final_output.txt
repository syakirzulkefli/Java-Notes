# Study Notes for 3- Logical Operators

## Transcript

In the last tutorial, you learn that a Boolean expression produces a Boolean value.
Now, there are times we want to combine multiple Boolean expressions.
Let me show you.
So I'm going to declare an integer called temperature and set it to 22.
Next we declare a Boolean variable is warm.
Now we want to check to see if temperature is greater than 20 and less than 30.
So we write a Boolean expression like this.
Temperature, greater than 20.
Here we need to use the end operator.
So these two ampersand represent the logical and operator in Java.
After this we add our second condition.
Temperature, less than 30.
Now, if both these conditions are true, the result of this Boolean expression is going to be true.
Otherwise, if at least one of these is false, the result would be false.
Let's take a look.
So I'm going to print is warm on the terminal.
The result is true, but if we change the temperature to let's say 12.
The result is going to be false.
And this is how this works.
Java will evaluate this expression from left to right.
First, it looks at the first condition.
The first condition is false because temperature is not greater than 20.
So because this expression is false, it doesn't matter what we have after the end operator.
Java will ignore the other expressions.
Because the end operator will return true if both conditions are true.
Okay?
Now let's look at another operator.
That is the OR operator.
So I'm going to delete all this code and start with a new example.
Let's declare a Boolean has high income.
We set it to true and another Boolean has good credit.
We set this to true as well.
So let's say we're building an application for processing loans.
We want to see if a new applicant is eligible for a loan or not.
So we declare another Boolean is eligible.
And by the way, look at the names I have used for these variables.
They're very meaningful and descriptive.
So here's the rule.
An applicant is eligible if they have high income or good credit.
If one of these conditions is true, they are eligible.
So we write has high income or so these two vertical bars represent the OR operator.
So if they have high income or good credit, then they are eligible.
So with the OR operator, if at least one condition is true, the result would be true.
In this example, when Java evaluates this expression, it starts from the left side.
This Boolean variable is true, so it doesn't matter what we have after.
Java will not evaluate the rest of this expression.
It simply returns true.
However, if this variable was false,
Java would continue evaluating this expression,
hoping that the next Boolean value or the next Boolean expression is true.
So this is the OR operator.
So finally we have the not operator that we use to reverse a value.
Let me show you how that works.
So let's declare another Boolean variable has criminal record.
We said this to false.
So here's the rule we want to implement.
In order for someone to be eligible for a loan, they should either have high income or good credit
and they should not have any criminal records.
So let's see how we can implement this rule.
We have implemented the first part.
They should either have high income or good credit.
Now we want to make sure that they don't have any criminal records.
So we need to combine the result of this expression with this Boolean value using the AND operator.
So first we wrap this expression in parentheses.
Then we apply the AND operator.
And here we add has criminal record.
Now we want to make sure they don't have criminal record.
This is where we use the not operator.
So the not operator will reverse the value of this Boolean variable or expression.
In this case, this variable is set to false.
So when we apply the not operator to it, the result would be true.
So if the first condition is true and the second condition is true, then that person is eligible for a new loan.
So as you can see, this logical operators are very useful in implementing real-world rules.
Next we're going to talk about if statements.
