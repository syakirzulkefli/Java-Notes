# Study Notes for 3- Creating Methods

## Transcript

So far, we have written all our code inside of this main method.
That's okay for small programs that have, let's say, 10 to 20 lines of code.
You really need to break down your code into smaller methods.
So for this demo, I'm going to show you how to create a new method called
Grid.
Let's say whenever we call this method, we give it the name of a user,
and this method will print a greeting message on the terminal.
Like, hi, John.
So how do we do this?
Well, here in our main class, after the main method, we start with an access modifier,
which can be public or private.
We'll talk about these access modifiers in the future,
where we talk about classes and object-oriented programming.
For now, all you need to know is that public means this method can be called
from outside of this class.
So we start with public and then we type static.
Now here we're defining a static method, which is a method that belongs to a class
as opposed to an object.
Again, this is an advanced topic we'll talk about this in the future,
where we talk about classes on object-oriented programming.
For now, we're just going to focus on static methods.
So public static, then we specify the return type of this method.
If this method returns a value like an integer, we type that here,
if it doesn't return any values we type, void.
Then we give our method a name, like greet or greet,
user, note the camel casing notation.
So we capitalize the first letter of every word, accept the first word.
Then we add a pair of parentheses.
If this method takes any parameters or any input, we add them here.
Otherwise, we use empty parentheses.
In this demo, we want to give an input to this method.
That's the name of the user, right?
So here we declare a string variable called name.
Now we say name is a parameter of this method,
and we can use it like a local variable inside of this method.
So here we add curly braces, in this method we simply type,
print line, hello, with a space,
and then we add the name of the user here.
So we're using this name parameter,
just like a local variable that we declare here.
It's no different, okay?
Now, here we have a method.
We need to call it from our main method.
So we call great user and give it an argument.
That is the value that we pass for the name parameter.
Let's say mosh.
Let's run the program.
So we get this greeting on the terminal.
Now we can reuse this method and call it multiple times,
and each time we can give it a new name, like mosh, john, whatever.
So this is the beauty of having new methods.
In this example, our great user method has only a single
line of code, but what if we had 10 lines of code here?
Instead of repeating those 10 lines over and over inside the main method,
we define them here once and then we reuse them with different arguments.
That's very powerful.
Now, this great user method currently has only a single parameter.
If you have multiple parameters, we need to separate them using a comma.
So let's rename this parameter using shift and f6 to first name,
and then we add a comma followed by the second parameter.
So string last name.
They here we can do something more interesting.
We can add a space and then print the last name.
They here we concatenating four strings and this is not ideal.
There is a better way to format strings.
We'll look at that in the future.
Now take a look here.
We have a compilation error because our method has two parameters,
but we supply only a single argument.
So here we need to add the second argument,
and the order of these matters.
So mosh will be copied to the first name parameter,
and hamadani will be copied to the last name parameter.
Now let's delete the second line.
We don't really need it.
Let's run the program.
So we get a little mosh hamadani, beautiful.
Now what if our method returns of value?
So I'm going to change this method.
Instead of printing this on the terminal,
I simply want to return a new string, which is the combination of all these pieces.
So let's remove the code for printing this string.
Now we want to return a value.
First we need to change the return type of this method to a string.
And then here we use the return statement.
Now when we call this method,
we get a new value.
We can simply store it in a variable.
So string message, we set it to the return value of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
So let's change the return type of this method.
